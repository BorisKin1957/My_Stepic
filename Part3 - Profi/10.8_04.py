'''
–§—É–Ω–∫—Ü–∏—è roundrobin() üå∂Ô∏è

–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é roundrobin(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤,
–∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —è–≤–ª—è–µ—Ç—Å—è –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–º –æ–±—ä–µ–∫—Ç–æ–º.

–§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∏—Ç–µ—Ä–∞—Ç–æ—Ä, –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∏–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤—Å–µ—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö
–∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: —Å–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–≤–æ–≥–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞,
–∑–∞—Ç–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤—Ç–æ—Ä–æ–≥–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞, –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ; –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–≤–æ–≥–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞,
–∑–∞—Ç–µ–º –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç –≤—Ç–æ—Ä–æ–≥–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞, –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –≠–ª–µ–º–µ–Ω—Ç—ã –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–º —Ñ—É–Ω–∫—Ü–∏–µ–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä–µ –¥–æ–ª–∂–Ω—ã —Ä–∞—Å–ø–æ–ª–∞–≥–∞—Ç—å—Å—è
–≤ —Å–≤–æ–µ–º –∏—Å—Ö–æ–¥–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–π –≤ —Ñ—É–Ω–∫—Ü–∏—é, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –í —Ç–µ—Å—Ç–∏—Ä—É—é—â—É—é —Å–∏—Å—Ç–µ–º—É —Å–¥–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Ñ—É–Ω–∫—Ü–∏—é roundrobin(),
–Ω–æ –Ω–µ –∫–æ–¥, –≤—ã–∑—ã–≤–∞—é—â–∏–π –µ–µ.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 4. –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ —Å—Å—ã–ª–∫–∞–º:

    –ê—Ä—Ö–∏–≤ —Å —Ç–µ—Å—Ç–∞–º–∏
    GitHub

Sample Input 1:

print(*roundrobin('abc', 'd', 'ef'))

Sample Output 1:

a d e b f c

Sample Input 2:

numbers = [1, 2, 3]
letters = iter('beegeek')

print(*roundrobin(numbers, letters))

Sample Output 2:

1 b 2 e 3 e g e e k

Sample Input 3:

print(list(roundrobin()))

Sample Output 3:

[]

–í–µ—Ä–Ω–æ —Ä–µ—à–∏–ª–∏ 868 —É—á–∞—â–∏—Ö—Å—è
–ò–∑ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫ 42% –≤–µ—Ä–Ω—ã—Ö
–ü—Ä–∞–≤–∏–ª—å–Ω–æ. '''

def roundrobin(*iterable):
    if not iterable:
        return []
    j = 0
    l = [iter(elem) for elem in iterable]
    while j < 100:
        for i in l:
            try:
                yield next(i)
            except StopIteration:
                j += 1
                continue


print(*roundrobin('abc', 'd', 'ef'))

print('test 2')

numbers = [1, 2, 3]
letters = iter('beegeek')

print(*roundrobin(numbers, letters))

print('test 3')

print(list(roundrobin()))

print('test 4')

numbers1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
numbers2 = range(5)
letters = iter('beegeek')

print(*roundrobin(numbers1, numbers2, letters))

print('test 5')

letters = iter('stepik')

print(*roundrobin(letters))

print('test 6')

numbers = roundrobin(map(abs, range(-10, 10)))

print(next(numbers))
print(next(numbers))
print(next(numbers))
print(next(numbers))
print(next(numbers))
print(next(numbers))

print('test 7')

numbers1 = map(abs, range(-10, 10))
numbers2 = filter(None, range(-10, 10))
numbers3 = map(abs, range(-5, 5))
numbers4 = filter(None, range(-5, 5))
numbers5 = map(abs, range(-1, 1))
numbers6 = filter(None, range(-1, 1))

print(*roundrobin(numbers1, numbers2, numbers3, numbers4, numbers5, numbers6))

print('test 8')

print(list(roundrobin([], [], [], [])))

print('tedt 9')

numbers = iter([1, 2, 3])
nones = iter([None, None, None, None])

print(*roundrobin(numbers, nones))