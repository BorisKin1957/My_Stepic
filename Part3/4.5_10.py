'''
–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞—Ä—Ö–∏–≤–∞ üå∂Ô∏èüå∂Ô∏è

–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –∞—Ä—Ö–∏–≤ desktop.zip, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞–ø–∫–∏ –∏ —Ñ–∞–π–ª—ã. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –µ–≥–æ
—Ñ–∞–π–ª–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –æ–±—ä–µ–º –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞.

–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–∞–µ—Ç—Å—è.

–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Ñ–∞–π–ª–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∞—Ä—Ö–∏–≤–∞ desktop.zip –∏ –æ–±—ä–µ–º –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –Ω–µ—Å–∂–∞—Ç–æ–º –≤–∏–¥–µ.
–¢–∞–∫ –∫–∞–∫ –∞—Ä—Ö–∏–≤ –∏–º–µ–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –∏–µ—Ä–∞—Ä—Ö–∏—é –ø–∞–ø–æ–∫, –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–¥–µ–ª–µ–Ω –¥–≤—É–º—è –ø—Ä–æ–±–µ–ª–∞–º–∏.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –í—ã–≤–æ–¥ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ –∞—Ä—Ö–∏–≤–∞ test.zip –∏–∑ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞:

test
  –ö–∞—Ä—Ç–∏–Ω–∫–∏
    1.jpg 88 KB
    avatar.png 19 KB
    certificate.png 43 KB
    py.png 33 KB
    World_Time_Zones_Map.png 2 MB
    –°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞.png 11 KB
  –ù–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞.djvu 5 MB
  –ü—Ä–æ–≥—Ä–∞–º–º—ã
    image_util.py 5 KB
    sort.py 61 B
  –†–∞–∑–Ω—ã–µ —Ñ–∞–π–ª—ã
    astros.json 505 B

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –û–±—ä–µ–º —Ñ–∞–π–ª–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ —Å–∞–º—ã—Ö –∫—Ä—É–ø–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –¥–æ —Ü–µ–ª—ã—Ö.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –ó–Ω–∞—á–µ–Ω–∏—è –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ç–∞–∫–∏–µ –∂–µ, –∫–∞–∫–∏–µ –ø—Ä–∏–Ω—è—Ç—ã –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ:

    1 KB = 1024 B
    1 MB = 1024 KB
    1 GB = 1024 MB

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 4. –£–∫–∞–∑–∞–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ. –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞—á—É –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ.
'''


def json_to_str(data_json):
    new = ''
    for sim in data_json:
        if sim not in '{}":,':
            new += sim
    dd = new.replace('\n    ', '\n')
    new = dd.replace('\n\n', '\n')
    dd = new.replace('\n    \n    ', '\n    ')
    new = dd.replace('\n    \n', '\n')
    dd = new.replace('    ', '  ')
    new = dd.replace('\n    \n', '\n')

    return(new.strip('\n'))



import json
from zipfile import ZipFile

with ZipFile('desktop.zip') as zip_file:
    name = zip_file.namelist()
    info = zip_file.infolist()

L = []
for item in name:
    l = item.strip('/').split('/')
    L.append(l)

D = {}

for item in L:
    for i in range(len(item)):
        a = item[i]
        if '.' not in a:
            if i == 0:
                key0 = a
                if a not in D:
                    D.setdefault(a, {})
            elif i == 1:
                key1 = a
                tmp = ', '.join(D[key0])
                if a not in tmp:
                    D[key0].setdefault(a, {})
            elif i == 2:
                key2 = a
                tmp = ', '.join(D[key0][key1])
                if a not in tmp:
                    D[key0][key1].setdefault(a, {})
        else:
            file = '/'.join(item)
            ind = name.index(file)
            size = info[ind].file_size
            if size < 1024:
                b = str(size) + ' B'
            if 1024 <= size < 1024 ** 2:
                b = str(round(size / 1024)) + ' KB'
            if 1024 ** 2  <= size < 1024 ** 3:
                b = str(round(size / 1024 ** 2)) + ' MB'
            if i == 0:
                D.setdefault(a, b)
            if i == 1:
                D[key0].setdefault(a, b)
            if i == 2:
                D[key0][key1].setdefault(a, b)
            if i == 3:
                D[key0][key1][key2].setdefault(a, b)

data = json.dumps(D, indent=4)

print(json_to_str(data))

'''–í–ï–†–ù–û–ï –†–ï–®–ï–ù–ò–ï —Å–ø–∏—Å–∫–æ–º

from zipfile import ZipFile


def convert(value):
    if 0 < value < 1024:
        return f'{value} B'
    elif 1024 < value < 1024 ** 2:
        return f'{round(value / 1024)} KB'
    elif 1024 ** 2 < value < 1024 ** 3:
        return f'{round(value / 1024 ** 2)} MB'
    elif 1024 ** 3 < value < 1024 ** 4:
        return f'{round(value / 1024 ** 3)} GB'
    else:
        return ''


with ZipFile('desktop.zip') as zip_file:
    for i in zip_file.infolist():
        a = i.filename.strip('/').split('/')
        name = a[-1]
        print('  ' * (len(a) - 1), end='')
        print(name, convert(i.file_size))'''