'''Функция fill_up_missing_dates()

Реализуйте функцию fill_up_missing_dates(), которая принимает на вход один аргумент:

    dates — список строковых дат в формате DD.MM.YYYY

Функция должна возвращать список, в котором содержатся все даты из списка dates,
расположенные в порядке возрастания, а также все недостающие промежуточные даты.

Примечание 1. Рассмотрим первый тест. Список dates содержит период с 01.11.2021 по 07.11.2021:

dates = ['01.11.2021', '07.11.2021', '04.11.2021', '03.11.2021']

в котором отсутствуют даты 02.11.2021, 05.11.2021, 06.11.2021. Тогда вызов функции:

fill_up_missing_dates(dates)

должен вернуть список:

['01.11.2021', '02.11.2021', '03.11.2021', '04.11.2021', '05.11.2021', '06.11.2021', '07.11.2021']

Примечание 2. Функция должна создавать и возвращать новый список, а не изменять переданный.

Примечание 3. В тестирующую систему сдайте программу, содержащую только необходимую
функцию fill_up_missing_dates(), но не код, вызывающий ее.

Примечание 4. Тестовые данные доступны по ссылкам:

    Архив с тестами
    GitHub

Sample Input 1:

dates = ['01.11.2021', '07.11.2021', '04.11.2021', '03.11.2021']

print(fill_up_missing_dates(dates))

Sample Output 1:

['01.11.2021', '02.11.2021', '03.11.2021', '04.11.2021', '05.11.2021', '06.11.2021', '07.11.2021']'''

def fill_up_missing_dates(dates):
    dt_list = []
    for i in dates:
        dt = datetime.strptime(i, '%d.%m.%Y')
        dt_list.append(dt.date())

    dt, pat = min(dt_list), '%d.%m.%Y'
    new = [dt.strftime(pat)]
    while dt != max(dt_list):
        dt += timedelta(days=1)
        s_dt = dt.strftime(pat)
        new.append(s_dt)

    return new

from datetime import timedelta, datetime

dates = ['01.11.2021', '04.11.2021', '09.11.2021', '15.11.2021']

print(fill_up_missing_dates(dates))