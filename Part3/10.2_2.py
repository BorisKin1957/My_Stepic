'''Функция transpose()

Транспонированная матрица — матрица AT, полученная из исходной матрицы AA заменой строк на столбцы.
То есть для получения транспонированной матрицы из исходной нужно каждую строчку исходной матрицы
записать в виде столбца в том же порядке.

Реализуйте функцию transpose() с использованием функции zip(), которая принимает один аргумент:

    matrix — матрица произвольной размерности

Функция должна возвращать транспонированную матрицу matrix.

Примечание 1. Под матрицей подразумеваются исключительно вложенные списки.

Примечание 2. Функция должна возвращать новую матрицу, а не изменять переданную.

Примечание 3. В тестирующую систему сдайте программу, содержащую только необходимую функцию transpose(),
но не код, вызывающий ее.

Примечание 4. Тестовые данные доступны по ссылкам:

    Архив с тестами
    GitHub

Sample Input 1:

matrix = [[1, 2, 3],
          [4, 5, 6],
          [7, 8, 9]]

for row in transpose(matrix):
    print(row)

Sample Output 1:

[1, 4, 7]
[2, 5, 8]
[3, 6, 9]

Sample Input 2:

matrix = [[1, 2, 3, 4, 5],
          [6, 7, 8, 9, 10]]

for row in transpose(matrix):
    print(row)

Sample Output 2:

[1, 6]
[2, 7]
[3, 8]
[4, 9]
[5, 10]


Верно. '''

def transpose(matrix):
    return list(map(lambda x: list(x), zip(*matrix)))


matrix = [[1, 2, 3],
          [4, 5, 6],
          [7, 8, 9]]

for row in transpose(matrix):
    print(row)

print('2')


matrix = [[1, 2, 3, 4, 5],
          [6, 7, 8, 9, 10]]

for row in transpose(matrix):
    print(row)

print('6')

matrix = [['1', '2'],
          ['4', '5'],
          ['7', '8'],
          ['3', 4],
          [True, None],
          [9, 80],
          [1, -1]]

print(transpose(matrix))